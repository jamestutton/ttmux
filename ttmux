#!/bin/bash
SOURCE="${BASH_SOURCE[0]}"
while [ -h "$SOURCE" ]; do
    TARGET="$(readlink "$SOURCE")"
    if [[ $SOURCE == /* ]]; then
        SOURCE="$TARGET"
    else
        ttmux="$( dirname "$SOURCE" )"
        SOURCE="$ttmux/$TARGET"
    fi
done
RDIR="$( dirname "$SOURCE" )"
ttmux="$( cd -P "$( dirname "$SOURCE" )" && pwd )"

. $ttmux/"lib/colors"
. $ttmux/"lib/utils"

ttmux_header
ensure_tmux_is_installed

argument=$1
# todo: convert this into a switch statement
if [[ $1 == "-l" ]]; then
    show_ttmux_files
    exit
fi
if [[ $1 == "-h" ]]; then
    show_ttmux_help
    exit
fi

if [ -f "$1" ]; then
    echo "${information}Configuration sent via parameters${reset}"
    . "$1"
else
    echo "${information}Retrieving local information ...${reset}"
    if [[ -n $(ls *.ttmux) ]]; then
        echo "${information}Configuration files found${reset}"
        found=$(ls -l *.ttmux|wc -l)
    else
        echo "${alert}No configuration available in folder $PWD${reset}"
        exit
    fi

    configurationLoaded=0
    if [ $found == 1 ]; then
        filename=$(ls *.ttmux)
        if [ -f "$filename" ]; then
            . $filename
            ensure_configuration_file_is_ok
            configurationLoaded=1
        fi
    fi

    if [ $configurationLoaded == 0 ]; then
        echo "${information}Select your configuration file here${reset}"
        select filename in `ls *.ttmux`
        do
            echo $filename
            if [ -f "$filename" ]; then
                echo ""
                echo "Loading $filename file"
                . $filename
                ensure_configuration_file_is_ok
                break
            else
                echo ""
                echo "Invalid selection"
            fi
        done
    fi
fi

tmux has-session -t ${session_name} 2>/dev/null
if [ "$?" -eq 1 ] ; then
    echo "${information}Session not found${reset}"
else
    echo "${alert}Session found${reset}"
    exit
fi

contatore=0
for repo in "${repositories[@]}"
do
    # mi sposto nella cartella del repository
        cd "${repo}"

    # verifico se la working directory e' sporca o meno
        echo ""
        echo "${information}Check if current branch needs commit${reset}"
        needscommit=0
        git status | grep nothing &> /dev/null
        if [ $? == 1 ]; then
            echo ""
            echo "${information}Needs commit${reset}"
            needscommit=1
        else
            echo ""
            echo "${information}Dont needs commit${reset}"
        fi

    # check current branch
        echo ""
        echo "${information}Retrieving current branch information ...${reset}"
        currentBranch=$(git symbolic-ref -q HEAD)
        currentBranch=${currentBranch##refs/heads/}
        currentBranch=${currentBranch:-HEAD}
        echo "${information}Branch is $currentBranch${reset}"

    # action ...
        if [ $needscommit == 1 ]; then
            echo "${question}Commit changes in $currentBranch?${reset}"
            read boolean
            commitnow='y'

            if [ $boolean == 'n' ]; then
                echo "${question}Want you commit changes now?${reset}"
                read commitnow
                if [ $commitnow == 'y' ]; then
                    echo "${question}What is the name of new branch?${reset}"
                    read branchname
                    git checkout -b $branchname
                    currentBranch=$branchname
                fi
            fi

            if [ $commitnow == 'y' ]; then
                git add .
                git commit -av
            fi
        fi

        git checkout master

    # update master
        fatch=`git fetch origin | wc -l`
        git branch --merged | grep -v master | xargs -n 1 git branch -D
        fatch=`git fetch origin | wc -l`
        pull=`git pull origin master | wc -l`


    # carico il branch preferito
        newbranch=()
        eval "$(git for-each-ref --shell \
            --format='newbranch+=(%(refname:short))' \
            refs/heads/)"
        select newbranch in "${newbranch[@]}"
        do
            if [[ "$newbranch" ]]; then
                git checkout "$newbranch"
                exit 0
            fi
        done
done

tmux atart-server
start=1
windownumber=$start
if [ -z "$ordered_windows" ]; then windows=${!window_list[@]}; else windows=${ordered_windows[@]}; fi
for window in $windows; do
    name=${window}
    keys=${window_list[$window]}
    if [ $((windownumber)) == $start ]; then
        tmux new-session -d -s "${session_name}" -n "${name}"
    else
        tmux new-window -t"${session_name}":$windownumber -n "${name}"
    fi

    tmux send-keys -t"${session_name}":$windownumber "${keys}" C-m

    if [ -n "${vertical_panes[$name]+1}" ]; then
        vertical_panes_command=${vertical_panes_command[$name]}
        vertical_panes_command_position=${vertical_panes_command_position[$name]}

        tmux splitw -h -p 40 -t"${session_name}":$windownumber
        tmux send-keys -t"${session_name}":"${windownumber}.${vertical_panes_command_position}" "${vertical_panes_command}" C-m
    fi


    if [ -n "${horizontal_panes[$name]+1}" ]; then
        horizontal_panes_command=${horizontal_panes_command[$name]}
        horizontal_panes_command_position=${horizontal_panes_command_position[$name]}

        tmux select-pane -L
        tmux splitw -v -p 50 -t"${session_name}":$windownumber
        tmux send-keys -t"${session_name}":"${windownumber}.${horizontal_panes_command_position}" "${horizontal_panes_command}" C-m
    fi

    ((windownumber++))
done
tmux select-window -t"${session_name}":$start
tmux attach-session -d -t"${session_name}"
